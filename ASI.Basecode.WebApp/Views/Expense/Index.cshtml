@model ASI.Basecode.Services.ServiceModels.BaseExpenseViewModel

@{
    ViewData["Title"] = "Expense Page";
    int currentPage = ViewData["CurrentPage"] as int? ?? 1;
    int totalPages = ViewData["TotalPages"] as int? ?? 1;
}


<body style="background-color: #B3ACDB;">
    <div class="page-container" style="background-color: #F0F0F7; border: 4px solid #9370DB;  border-radius: 10px;padding: 20px; top: 35px;">
        <h1 class="expense-display   animated fadeIn" style="color: #4b0082;">Expense</h1>

        <hr />
        <p>
            <button type="button" class="btn btn-primary" style="background-image: linear-gradient(to right, #4b0082, #9370DB); color: white;border: none;color: white;" data-toggle="modal" data-target="#createExpenseModal">
                Create New
            </button>


        </p>
        <div style="width: 100%; height: 600px; overflow-y: auto;">
            <div class="mb-3">
                <input type="text" id="searchInput" class="form-control" placeholder="Search expenses..."
                       style="border: 2px solid #9370DB; border-radius: 5px;">
            </div>
            <table id="expenseTable" class=" table table-bordered table-hover" style="background-color: white; margin-top: -5px; width:100%;">
                <thead style="background-color: #483D8B; color: white;">
                    <tr>
                        <th>Title</th>
                        <th>Description</th>
                        <th>Amount</th>
                        <th>Category</th>
                        <th>Date Created</th>
                        <th class="text-center">Actions</th>
                    </tr>
                </thead>
                <tbody style="background-color: white; color: black;">
                    @foreach (var item in Model.ListExpenseViewModel)
                    {
                        <tr>
                            <td>@Html.DisplayFor(modelItem => item.Title)</td>
                            <td>@Html.DisplayFor(modelItem => item.Description)</td>
                            <td>@Html.DisplayFor(modelItem => item.Amount)</td>
                            <td>@Html.DisplayFor(modelItem => item.Name)</td>
                            <td>
                                @if (item.DateCreated.HasValue)
                                {
                                    @item.DateCreated.Value.ToString("yyyy-MM-dd")
                                }
                                else
                                {
                                    @string.Empty
                                    // or any placeholder text like "N/A"
                                }
                            </td>
                            <td class="text-center">
                                <div style="display: flex; gap: 10px; align-items: center; justify-content: center;">
                                    <button class="btn btn-warning" data-toggle="modal" data-target="#editExpenseModal"
                                            data-id="@item.ExpenseId"
                                            data-title="@item.Title"
                                            data-amount="@item.Amount"
                                            data-description="@item.Description"
                                            data-datecreated="@(item.DateCreated?.ToString("yyyy-MM-dd"))"
                                            data-categoryid="@item.CategoryId">
                                        Edit
                                    </button>
                                    @Html.ActionLink("Delete", "Delete", new { ExpenseId = item.ExpenseId }, new { @class = "btn btn-sm", style = "background-color: #C14444; color: white; height: 38px; display: flex; justify-content: center; align-items: center;" })
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <nav aria-label="Page navigation">
            <ul class="pagination">
                @if (ViewData["CurrentPage"] != null && (int)ViewData["CurrentPage"] > 1)
                {
                    <li class="page-item">
                        <a class="page-link" asp-action="Index" asp-route-pageNumber="@(currentPage - 1)">Previous</a>
                    </li>
                }

                @for (int i = 1; i <= totalPages; i++)
                {
                    if (i <= 3 || i > totalPages - 3 || (i >= currentPage - 2 && i <= currentPage + 2))
                    {
                        <li class="page-item @(i == currentPage ? "active" : "")">
                            <a class="page-link" asp-action="Index" asp-route-pageNumber="@i">@i</a>
                        </li>
                    }
                    else if (i == 4 || i == totalPages - 3)
                    {
                        <li class="page-item disabled">
                            <span class="page-link">...</span>
                        </li>
                    }
                }

                @if (ViewData["CurrentPage"] != null && (int)ViewData["CurrentPage"] < totalPages)
                {
                    <li class="page-item">
                        <a class="page-link" asp-action="Index" asp-route-pageNumber="@(currentPage + 1)">Next</a>
                    </li>
                }

                <!-- Last Page link -->
                @if (currentPage < totalPages)
                {
                    <li class="page-item">
                        <a class="page-link" asp-action="Index" asp-route-pageNumber="@totalPages">Last</a>
                    </li>
                }
            </ul>
        </nav>
    </div>
</body>

@{
    await Html.RenderPartialAsync("Create", Model.EntryForm);
    await Html.RenderPartialAsync("Edit", Model.EntryForm);
}

@section Scripts {
    <script>
        $(document).ready(function () {
            $('#editExpenseModal').on('show.bs.modal', function (event) {
                var button = $(event.relatedTarget);
                var id = button.data('id');
                var title = button.data('title');
                var amount = button.data('amount');
                var description = button.data('description');
                var dateCreated = button.data('datecreated');
                var categoryId = button.data('categoryid');

                var modal = $(this);
                modal.find('input[name="ExpenseId"]').val(id);
                modal.find('input[name="Title"]').val(title);
                modal.find('input[name="Amount"]').val(amount);
                modal.find('textarea[name="Description"]').val(description);
                // Handle date formatting
                if (dateCreated) {
                    try {
                        // Parse the date and handle potential invalid dates
                        var date = new Date(dateCreated);
                        if (!isNaN(date.getTime())) {
                            // Only format if it's a valid date
                            var formattedDate = date.toISOString().split('T')[0];
                            modal.find('input[name="DateCreated"]').val(formattedDate);
                        } else {
                            // Set today's date as fallback
                            var today = new Date();
                            modal.find('input[name="DateCreated"]').val(today.toISOString().split('T')[0]);
                        }
                    } catch (error) {
                        console.error('Error formatting date:', error);
                        // Set today's date as fallback
                        var today = new Date();
                        modal.find('input[name="DateCreated"]').val(today.toISOString().split('T')[0]);
                    }
                }

                // Fetch and populate category dropdown
                const apiUrl = '@Url.Action("RetrieveCategoriesFromUserId", "Category")';
                fetch(apiUrl)
                    .then(response => response.json())
                    .then(data => {
                        const categoryDropdown = modal.find('#categoryDropdown');
                        categoryDropdown.empty(); // Clear previous options
                        categoryDropdown.append('<option value="">-- Select Category --</option>');
                        data.forEach(category => {
                            const option = $('<option></option>')
                                .val(category.categoryId)
                                .text(category.name);

                            // Ensure categoryId is compared as numbers
                            if (parseInt(category.categoryId) === parseInt(categoryId)) {
                                option.attr("selected", "selected");
                            }

                            categoryDropdown.append(option);
                        });
                    })
                    .catch(error => console.error('Error fetching categories:', error));
            });
        });

        $(document).ready(function () {
            $('#createExpenseModal').on('show.bs.modal', function () {
                const apiUrl = '@Url.Action("RetrieveCategoriesFromUserId", "Category")';
                $('.text-danger').empty();

                fetch(apiUrl)
                    .then(response => response.json())
                    .then(data => {
                        const categoryDropdown = $(this).find('#categoryDropdown');
                        categoryDropdown.empty(); // Clear previous options
                        categoryDropdown.append('<option value="">-- Select Category --</option>');
                        data.forEach(category => {
                            const option = $('<option></option>')
                                .val(category.categoryId)
                                .text(category.name);
                            categoryDropdown.append(option);
                        });
                    })
                    .catch(error => console.error('Error fetching categories:', error));
            });
        });
        // Debounce function
        function debounce(func, wait) {
            let timeout;
            return function (...args) {
                clearTimeout(timeout);
                timeout = setTimeout(() => func.apply(this, args), wait);
            };
        }

        // Handle search input
        $('#searchInput').on('input', debounce(function () {
            const searchTerm = $(this).val() || '';

            $.ajax({
                url: '/Expense/Search',
                type: 'GET',
                data: { term: searchTerm },
                success: function (data) {
                    const tbody = $('table tbody');
                    tbody.empty();

                    if (data && data.length > 0) {
                        data.forEach(function (item) {
                            const dateCreated = item.dateCreated ? new Date(item.dateCreated).toISOString().split('T')[0] : '';
                            const row = `
                                        <tr>
                                            <td>${item.title || ''}</td>
                                            <td>${item.description || ''}</td>
                                            <td>${item.amount || ''}</td>
                                            <td>${item.name || ''}</td>
                                            <td>${dateCreated}</td>
                                            <td class="text-center">
                                                <div style="display: flex; gap: 10px; align-items: center; justify-content: center;">
                                                    <button class="btn btn-warning" data-toggle="modal"
                                                            data-target="#editExpenseModal"
                                                            data-id="${item.expenseId}"
                                                            data-title="${item.title || ''}"
                                                            data-amount="${item.amount || ''}"
                                                            data-description="${item.description || ''}"
                                                            data-datecreated="${dateCreated}"
                                                            data-categoryid="${item.categoryId || ''}">
                                                        Edit
                                                    </button>
                                                    <a href="/Expense/Delete/${item.expenseId}"
                                                       class="btn btn-sm"
                                                       style="background-color: #C14444; color: white; height: 38px; display: flex; justify-content: center; align-items: center;">
                                                        Delete
                                                    </a>
                                                </div>
                                            </td>
                                        </tr>
                                    `;
                            tbody.append(row);
                        });
                    } else {
                        tbody.append('<tr><td colspan="6" class="text-center">No results found</td></tr>');
                    }
                },
                error: function (xhr, status, error) {
                    console.error('Search error:', error);
                    const tbody = $('table tbody');
                    tbody.empty();
                    tbody.append('<tr><td colspan="6" class="text-center">Error occurred while searching</td></tr>');
                }
            });
        }, 300));

    </script>
}