@model ASI.Basecode.Services.ServiceModels.BaseExpenseViewModel

@{
    ViewData["Title"] = "Expense Page";
    int currentPage = ViewData["CurrentPage"] as int? ?? 1;
    int totalPages = ViewData["TotalPages"] as int? ?? 1;
}
<div class="page-container">
<h1>Expense</h1>
<hr />
<p>
    <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#createExpenseModal"> Create New </button>
</p>

<table class="table table-striped table-hover">
    <thead class="thead-dark">
        <tr>
            <th>
                Title
            </th>
            <th>
                Description
            </th>
            <th>
                Amount
            </th>
            <th>
                Category
            </th>
            <th>
                DateCreated
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.ListExpenseViewModel)
        {
                <tr>
                    <td>
                    @Html.DisplayFor(modelItem => item.Title)
                    </td>
                    <td>
                    @Html.DisplayFor(modelItem => item.Description)
                    </td>
                    <td>
                    @Html.DisplayFor(modelItem => item.Amount)
                    </td>
                    <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @if (item.DateCreated.HasValue)
                    {
                        @item.DateCreated.Value.ToString("yyyy-MM-dd")
                    }
                    else
                    {
                        @string.Empty
                        // or any placeholder text like "N/A"
                    }
                </td>
                <td class="text-center">
                        <button class="btn btn-warning" data-toggle="modal" data-target="#editExpenseModal"
                        data-id="@item.ExpenseId" 
                        data-title="@item.Title" 
                        data-amount="@item.Amount"
                        data-description="@item.Description"
                        data-datecreated="@item.DateCreated"
                        data-categoryid="@item.CategoryId">Edit</button>
                    @Html.ActionLink("Delete", "Delete", new { ExpenseId = item.ExpenseId }, new { @class = "btn btn-sm btn-danger" })
                </td>
            </tr>
        }
    </tbody>
</table>
<nav aria-label="Page navigation">
    <ul class="pagination">
        @if (ViewData["CurrentPage"] != null && (int)ViewData["CurrentPage"] > 1)
        {
            <li class="page-item">
                <a class="page-link" asp-action="Index" asp-route-pageNumber="@(currentPage - 1)">Previous</a>
            </li>
        }

        @for (int i = 1; i <= totalPages; i++)
        {
            if (i <= 3 || i > totalPages - 3 || (i >= currentPage - 2 && i <= currentPage + 2))
            {
                <li class="page-item @(i == currentPage ? "active" : "")">
                    <a class="page-link" asp-action="Index" asp-route-pageNumber="@i">@i</a>
                </li>
            }
            else if (i == 4 || i == totalPages - 3)
            {
                <li class="page-item disabled">
                    <span class="page-link">...</span>
                </li>
            }
        }

        @if (ViewData["CurrentPage"] != null && (int)ViewData["CurrentPage"] < totalPages)
        {
            <li class="page-item">
                <a class="page-link" asp-action="Index" asp-route-pageNumber="@(currentPage + 1)">Next</a>
            </li>
        }

        <!-- Last Page link -->
        @if (currentPage < totalPages)
        {
            <li class="page-item">
                <a class="page-link" asp-action="Index" asp-route-pageNumber="@totalPages">Last</a>
            </li>
        }
    </ul>
</nav>
</div>

@{
    await Html.RenderPartialAsync("Create", Model.EntryForm);
    await Html.RenderPartialAsync("Edit", Model.EntryForm);
}

@section Scripts {
        <script>
            $(document).ready(function () {
            $('#editExpenseModal').on('show.bs.modal', function (event) {
            var button = $(event.relatedTarget);
            var id = button.data('id');
            var title = button.data('title');
            var amount = button.data('amount');
            var description = button.data('description');
            var dateCreated = button.data('datecreated');
            var categoryId = button.data('categoryid');

            var modal = $(this);
            modal.find('input[name="ExpenseId"]').val(id);
            modal.find('input[name="Title"]').val(title);
            modal.find('input[name="Amount"]').val(amount);
            modal.find('input[name="Description"]').val(description);
            if (dateCreated) {
                var formattedDate = new Date(dateCreated).toISOString().split('T')[0]; // Formats to 'yyyy-mm-dd'
                modal.find('input[name="DateCreated"]').val(formattedDate);
            }

            // Fetch and populate category dropdown
            const apiUrl = '@Url.Action("RetrieveCategoriesFromUserId", "Category")';
            fetch(apiUrl)
                .then(response => response.json())
                .then(data => {
                    const categoryDropdown = modal.find('#categoryDropdown');
                    categoryDropdown.empty(); // Clear previous options
                    categoryDropdown.append('<option value="">-- Select Category --</option>');
                    data.forEach(category => {
                        const option = $('<option></option>')
                            .val(category.categoryId)
                            .text(category.name);

                        // Select the current category if it matches the expense's categoryId
                        if (category.categoryId == categoryId) {
                            option.attr("selected", "selected");
                        }

                        categoryDropdown.append(option);
                    });
                })
                .catch(error => console.error('Error fetching categories:', error));
                });
            });

            $(document).ready(function () {
                $('#createExpenseModal').on('show.bs.modal', function () {
                const apiUrl = '@Url.Action("RetrieveCategoriesFromUserId", "Category")';
                $('.text-danger').empty();

                fetch(apiUrl)
                    .then(response => response.json())
                    .then(data => {
                        const categoryDropdown = $(this).find('#categoryDropdown');
                        categoryDropdown.empty(); // Clear previous options
                        categoryDropdown.append('<option value="">-- Select Category --</option>');
                        data.forEach(category => {
                            const option = $('<option></option>')
                                .val(category.categoryId)
                                .text(category.name);
                            categoryDropdown.append(option);
                        });
                    })
                    .catch(error => console.error('Error fetching categories:', error));
            });
        });
       </script>
}
